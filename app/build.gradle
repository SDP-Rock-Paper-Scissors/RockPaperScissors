plugins {
    id 'com.android.application'
    id 'com.google.android.gms.oss-licenses-plugin'
    id 'kotlin-android'
    id 'jacoco'
    id 'kotlin-kapt'
}

apply plugin: 'com.google.gms.google-services'

apply plugin: 'androidx.navigation.safeargs'

jacoco {
    toolVersion = "0.8.7"
}

android {
    signingConfigs {
        release {
            storeFile file('key.jks')
            storePassword '123456'
            keyPassword '123456'
            keyAlias 'key0'
        }
    }
    compileSdk 31
    testOptions {
        animationsDisabled = true
    }
    defaultConfig {
        applicationId "ch.epfl.sweng.rps"
        minSdk 24
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.debug
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding = true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE-notice.md', 'META-INF/LICENSE.md', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/*.kotlin_module']
        }
    }
    aaptOptions {
        noCompress "tflite"
        // or noCompress "lite"
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation 'com.ramotion.paperonboarding:paper-onboarding:1.1.3'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'com.google.android.gms:play-services-auth:20.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.databinding:databinding-runtime:7.2.0'
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.2'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.1'
    implementation 'androidx.preference:preference-ktx:1.2.0'

    implementation 'org.jetbrains.kotlin:kotlin-test'
    implementation(platform("org.junit:junit-bom:5.8.2"))
    implementation("org.junit.jupiter:junit-jupiter")
    implementation 'com.google.mlkit:common:18.2.0'

    testImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    androidTestImplementation 'androidx.test:core-ktx:1.4.0'

    androidTestImplementation 'org.jetbrains.kotlin:kotlin-test'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.4.0') {
        exclude module: "protobuf-lite"
    }

    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:30.0.1')

    // Declare the dependency for the Cloud Firestore library
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-firestore-ktx'

    // Declare the dependency for the Firebase Authentication library
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-auth-ktx'

    // Declare the dependency for the Cloud Storage library
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-storage-ktx'
    implementation 'com.google.firebase:firebase-functions-ktx'


    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.6.1'

    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.1'
    testImplementation 'org.mockito:mockito-core:4.4.0'
    testImplementation "org.mockito.kotlin:mockito-kotlin:3.2.0"
    testImplementation "io.mockk:mockk:1.12.2"
    testImplementation 'org.junit.jupiter:junit-jupiter'

    androidTestImplementation "io.mockk:mockk-android:1.12.2"

    //Declare the dependency for camera related functions
    def camerax_version = "1.1.0-rc01"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-video:${camerax_version}"

    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation "androidx.camera:camera-extensions:${camerax_version}"

    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'

    // For UI dependency
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation('io.coil-kt:coil:2.1.0')
    implementation 'com.google.firebase:firebase-appcheck-safetynet:16.0.0'
    //Declare the dependency for image labelling
    implementation 'com.google.mlkit:image-labeling-custom:17.0.1'

}


configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.7"
            }
        }
    }
}


tasks.withType(Test) {
    useJUnitPlatform()
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled(true)
        html.enabled(true)
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // Exclude Hilt generated classes
            '**/*Hilt*.*',
            'hilt_aggregated_deps/**',
            '**/*_Factory.class',
            '**/*_MembersInjector.class'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec'
    ]))
}

connectedCheck {
    finalizedBy jacocoTestReport
}
